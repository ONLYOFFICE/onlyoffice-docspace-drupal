<?php

/**
 * @file
 * Primary module hooks for ONLYOFFICE DocSpace Connector module.
 */

/**
 * Copyright (c) Ascensio System SIA 2023.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\onlyoffice_docspace\Controller\OODSPCredentialsController;
use Drupal\onlyoffice_docspace\Plugin\Field\FieldType\OODSPItem;

/**
 * Implements hook_help().
 */
function onlyoffice_docspace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.onlyoffice_docspace':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ONLYOFFICE DocSpace Connector allows using the room-based environment for effective document collaboration right within Drupal. Users are able to create Collaboration and Custom rooms with the pre-set access level, edit and co-author all types of office files.') . '</p>';

      $output .= '<h3>' . t('Installation and configuration') . '</h3>';
      $output .= '<p>' . t('As a Drupal admin, go to Extend -> Add new module and upload the plugin archive. Once done, click Install. To configure the plugin, enter your ONLYOFFICE DocSpace address, administrator login and password. Learn more details on the <a href=":onlyoffice-docspace-drupal">official project page</a>.', [':onlyoffice-docspace-drupal' => 'https://github.com/ONLYOFFICE/onlyoffice-docspace-drupal']) . '</p>';

      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function onlyoffice_docspace_theme($existing, $type, $theme, $path) {
  return [
    'onlyoffice_docspace_page' => [
      'variables' => [],
      'template' => 'onlyoffice-docspace-page',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete() for user entities.
 */
function onlyoffice_docspace_user_delete($account) {
  \Drupal::database()->delete('users_docspace')
    ->condition('uid', $account->id())
    ->execute();
}

/**
 * Implements hook_entity_presave().
 */
function onlyoffice_docspace_entity_presave(EntityInterface $entity) {
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  $userStorage = \Drupal::service('entity_type.manager')->getStorage('user');
  $account = $userStorage->load(0);

  if (!method_exists($entity, 'isPublished') || !$entity->isPublished() || !$account->hasPermission('access content')) {
    return;
  }

  $rooms = [];
  $files = [];

  $oodsp_item_fields = _onlyoffice_docspace_get_oodsp_item_fields($entity);

  foreach ($oodsp_item_fields as $oodsp_item_field) {
    $field_items = $entity->get($oodsp_item_field);
    foreach ($field_items as $field_item) {
      if (!empty($field_item->target_id)) {
        if ($field_item->type === 'manager') {
          $rooms[] = [
            'id' => $field_item->target_id,
            'title' => $field_item->title,
            'access' => FALSE,
          ];
        }

        if ($field_item->type === 'editor') {
          $files[] = [
            'id' => $field_item->target_id,
            'title' => $field_item->title,
            'access' => FALSE,
          ];
        }
      }
    }
  }

  $rooms = _onlyoffice_docspace_unique_multidim_array($rooms, 'id');
  $files = _onlyoffice_docspace_unique_multidim_array($files, 'id');

  foreach ($files as &$file) {
    $responseFileInfo = \Drupal::service('onlyoffice_docspace.request_manager')->getFileInfo($file['id']);

    if (!$responseFileInfo['error']) {
      $folder_id = $responseFileInfo['data']['folderId'];

      $responseFolderInfo = \Drupal::service('onlyoffice_docspace.request_manager')->getFolderInfo($folder_id);

      if (!$responseFolderInfo['error']) {
        $room_id = $responseFolderInfo['data']['pathParts'][1];
        $file['room_id'] = $room_id;
      }
    }
  }

  $success_shared_rooms_id = [];

  foreach ($rooms as &$room) {
    $responseShareRoom = \Drupal::service('onlyoffice_docspace.request_manager')->shareRoomPublicUser($room['id']);
    if (!$responseShareRoom['error']) {
      $room['access'] = TRUE;
      $success_shared_rooms_id[] = $room['id'];
    }
  }

  foreach ($files as &$file) {
    if (array_key_exists('room_id', $file)) {
      if (in_array($file['room_id'], $success_shared_rooms_id)) {
        $file['access'] = TRUE;
      }
      else {
        $responseShareRoom = \Drupal::service('onlyoffice_docspace.request_manager')->shareRoomPublicUser($file['room_id']);
        if (!$responseShareRoom['error']) {
          $file['access'] = TRUE;
          $success_shared_rooms_id[] = $file['room_id'];
        }
      }
    }
  }

  $success_shared_rooms = _onlyoffice_docspace_filter_array_by_key($rooms, 'access', TRUE, 'title');
  $error_shared_rooms = _onlyoffice_docspace_filter_array_by_key($rooms, 'access', FALSE, 'title');
  $success_shared_files = _onlyoffice_docspace_filter_array_by_key($files, 'access', TRUE, 'title');
  $error_shared_files = _onlyoffice_docspace_filter_array_by_key($files, 'access', FALSE, 'title');

  if (!empty($success_shared_rooms)) {
    \Drupal::messenger()->addStatus(
      t(
        'ONLYOFFICE DocSpace: Rooms (@success_shared_rooms) is available for @user.',
        [
          '@success_shared_rooms' => implode(", ", $success_shared_rooms),
          '@user' => OODSPCredentialsController::OODSP_PUBLIC_USER_FIRSTNAME . ' ' . OODSPCredentialsController::OODSP_PUBLIC_USER_LASTNAME,
        ]
      )
    );
  }

  if (!empty($error_shared_rooms)) {
    \Drupal::messenger()->addError(
      t(
        'ONLYOFFICE DocSpace: Rooms (@error_shared_rooms) sharing for @user failed!',
        [
          '@error_shared_rooms' => implode(", ", $error_shared_rooms),
          '@user' => OODSPCredentialsController::OODSP_PUBLIC_USER_FIRSTNAME . ' ' . OODSPCredentialsController::OODSP_PUBLIC_USER_LASTNAME,
        ]
      )
    );
  }

  if (!empty($success_shared_files)) {
    \Drupal::messenger()->addStatus(
      t(
        'ONLYOFFICE DocSpace: Files (@success_shared_files) is available for @user.',
        [
          '@success_shared_files' => implode(", ", $success_shared_files),
          '@user' => OODSPCredentialsController::OODSP_PUBLIC_USER_FIRSTNAME . ' ' . OODSPCredentialsController::OODSP_PUBLIC_USER_LASTNAME,
        ]
      )
    );
  }

  if (!empty($error_shared_files)) {
    \Drupal::messenger()->addError(
      t(
        'ONLYOFFICE DocSpace: Files (@error_shared_files) sharing for @user failed!',
        [
          '@error_shared_files' => implode(", ", $error_shared_files),
          '@user' => OODSPCredentialsController::OODSP_PUBLIC_USER_FIRSTNAME . ' ' . OODSPCredentialsController::OODSP_PUBLIC_USER_LASTNAME,
        ]
      )
    );
  }
}

/**
 * Determines the oodsp_item fields on an entity.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   An entity whose fields to analyze.
 */
function _onlyoffice_docspace_get_oodsp_item_fields(FieldableEntityInterface $entity) {
  $field_definitions = $entity->getFieldDefinitions();
  if (empty($field_definitions)) {
    return [];
  }

  $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
  return array_keys(array_filter($field_definitions, function (FieldDefinitionInterface $definition) use ($field_type_manager) {
    $type = $definition->getType();
    $plugin_class = $field_type_manager->getPluginClass($type);
    return is_subclass_of($plugin_class, OODSPItem::class) || $plugin_class === OODSPItem::class;
  }));
}

/**
 * Returns an array with unique values ​​by key.
 *
 * @param array $array
 *   The target array.
 * @param array $key
 *   The target key.
 */
function _onlyoffice_docspace_unique_multidim_array($array, $key) {
  $key_array = [];
  $temp_array = [];
  $i = 0;

  foreach ($array as $val) {
    if (!in_array($val[$key], $key_array)) {
      $key_array[$i] = $val[$key];
      $temp_array[$i] = $val;
    }
    $i++;
  }

  return $temp_array;
}

/**
 * Returns an array of elements whose key property is equal to the values.
 *
 * @param array $array
 *   The target array.
 * @param array $key
 *   The target key.
 * @param array $value
 *   The target value.
 * @param array $return_value
 *   The target return_value.
 */
function _onlyoffice_docspace_filter_array_by_key($array, $key, $value, $return_value = NULL) {
  $result = [];

  foreach ($array as $val) {
    if ($val[$key] === $value) {
      if (!empty($return_value)) {
        $result[] = $val[$return_value];
      }
      else {
        $result[] = $val;
      }
    }
  }

  return $result;
}
